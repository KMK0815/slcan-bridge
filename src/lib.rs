#![no_std]
#![no_main]

use cortex_m_semihosting::debug;

use defmt_rtt as _; // global logger

// our hal
use embassy_stm32 as _;

use panic_probe as _;

// same panicking *behavior* as `panic-probe` but doesn't print a panic message
// this prevents the panic message being printed *twice* when `defmt::panic` is invoked
#[defmt::panic_handler]
fn panic() -> ! {
    cortex_m::asm::udf()
}

/// Terminates the application and makes a semihosting-capable debug tool exit
/// with status code 0.
pub fn exit() -> ! {
    loop {
        debug::exit(debug::EXIT_SUCCESS);
    }
}

/// Hardfault handler.
///
/// Terminates the application and makes a semihosting-capable debug tool exit
/// with an error. This seems better than the default, which is to spin in a
/// loop.
#[cortex_m_rt::exception]
unsafe fn HardFault(_frame: &cortex_m_rt::ExceptionFrame) -> ! {
    loop {
        debug::exit(debug::EXIT_FAILURE);
    }
}

use core::fmt::Write;
use defmt::*;
use embedded_hal::can::Frame;
use heapless::Vec;
use mcp2515::frame::CanFrame;
use slcan_parser::CanserialFrame;

/// Convert `CanserialFrame` to `CanFrame` for use with mcp2515 driver
pub fn canserial_to_mcp2515(slcan: &CanserialFrame) -> Option<CanFrame> {
    CanFrame::new(slcan.id(), slcan.data())
}

/// Convert `CanFrame` to `CanserialFrame` for use with serial port
pub fn mcp2515_to_canserial(mcpframe: &CanFrame) -> Option<CanserialFrame> {
    match CanserialFrame::new_frame(mcpframe.id(), mcpframe.data()) {
        Ok(f) => Some(f),
        Err(_e) => {
            error!("unable to convert mcp25215 frame to canserial");
            None
        }
    }
}

/// Convert `CanFrame` to `Vec` containing ascii string generated by a `CanserialFrame`
pub fn mcp2515_to_vec(mcpframe: &CanFrame) -> Option<Vec<u8, 32>> {
    match CanserialFrame::new_frame(mcpframe.id(), mcpframe.data()) {
        Ok(f) => {
            let mut buffer: Vec<u8, 32> = Vec::new();
            core::write!(&mut buffer, "{}\r\n", f).unwrap();
            Some(buffer)
        }
        Err(_e) => {
            error!("unable to convert mcp25215 frame to canserial");
            None
        }
    }
}
